



Building Blocks for HTTP APIs                                   R. Gupta
Internet-Draft                                               14 May 2025
Intended status: Informational                                          
Expires: 15 November 2025


                           HTTP Events Query
                draft-gupta-httpapi-events-query-latest

Abstract

   Events Query is a minimal protocol built on top of HTTP that allows
   user agents to receive event notifications directly from any resource
   of interest.  The Events Query Protocol (EQP) is predicated on the
   idea that the most intuitive source for event notifications is the
   resource itself.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://CxRes.github.io/events-query/draft-gupta-httpapi-events-
   query.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-gupta-httpapi-events-query/.

   Discussion of this document takes place on the Building Blocks for
   HTTP APIs Working Group mailing list (mailto:httpapi@ietf.org), which
   is archived at https://mailarchive.ietf.org/arch/browse/httpapi/.
   Subscribe at https://www.ietf.org/mailman/listinfo/httpapi/.

   Source for this draft and an issue tracker can be found at
   https://github.com/CxRes/events-query.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 15 November 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Design
     2.1.  Goals
     2.2.  Constraints
     2.3.  Scope
     2.4.  Limitations
   3.  Conformance
     3.1.  Document Conventions
     3.2.  Requirements Notation
   4.  Terminology and Core Concepts
     4.1.  Event
     4.2.  Observation
     4.3.  Event Notification
     4.4.  Subscription
   5.  Preliminaries
     5.1.  Events Header Field
       5.1.1.  The duration property
     5.2.  Incremental Header Field
     5.3.  Events Query Data Model
   6.  Discovery
   7.  Single Notification
     7.1.  Request
     7.2.  Response
   8.  Multiple Notifications
     8.1.  Request
     8.2.  Response
       8.2.1.  Termination
   9.  Including Representation
     9.1.  Request
     9.2.  Response
   10. Security Considerations
   11. IANA Considerations
     11.1.  HTTP Field Registration
     11.2.  The HTTP Events Field Registry
       11.2.1.  Template
       11.2.2.  Initial Registry Contents
   12. References
     12.1.  Normative References
     12.2.  Informative References
   Acknowledgments
   Index
   Author's Address

1.  Introduction

   HTTP was originally designed for transferring static documents within
   a single request and response.  HTTP does not automatically inform
   clients of changes to a document.  This design was adequate for web
   pages that were mostly static and written by hand.

   But web-applications today are dynamic, requiring instantaneous
   updates from sources.  The many workarounds developed over the years
   to provide real-time updates for resources using HTTP have proven to
   be inadequate.  Web programmers instead resort to implementing custom
   messaging systems over alternate protocols such as WebSockets [WS],
   which requires additional layers of code, typically involving non-
   standard JavaScript frameworks to provide event notifications.  It
   also requires additional work to coordinate a representation and
   notifications that are served on different protocols.

   Events Query is a minimal protocol built on top of [HTTP] that allows
   applications to request event notifications directly from a resource
   of interest using the QUERY method ([HTTP-QUERY], Section 3).

   The objective of this specification is to make the request and
   receipt of event notifications extremely convenient for consumers.
   Programmers implementing Events Query shall no longer be forced to
   switch to another protocol to incorporate real-time functionality in
   their web applications.  Not only that, web-applications shall
   receive a representation and notifications in a single response,
   obviating any need for co-ordination and saving on unnecessary
   roundtrips.

   With the help of a suitable composite media-type parser, Events Query
   responses can be consumed with just a few lines of code, as
   illustrated in the JavaScript example below:

   const response = fetch('http://example.com', {
     method: 'QUERY',
     headers: {
       'Content-Type': 'application/json',
       Accept: 'application/http'
     },
     body: JSON.stringify({
       state: { Accept: 'text/plain' },
       events: { Accept: 'example/event-request' }
     })
   });

   const splitResponse = splitHTTPResponseStream(response);
   // splits the response into an iterable of representation and notifications

   const representation = await splitResponse.next();
   // Isolate the representation
   // API identical to fetch Response

   for await (const notification of splitResponse) {
     // do something with a notification
     // API identical to fetch Response
   }

                    Figure 1: Events Query Fetch Example

   Unlike other HTTP based event notification mechanisms, Events Query
   supports content negotiation for notifications, just like
   representations.  Thus, the Events Query protocol preserves the
   flexibility of interaction afforded by HTTP and extends it to
   notifications.

   When combined with suitable synchronization mechanisms like Conflict
   Free Replicated Data Types (CRDT) or Operational Transforms (OT),
   such event notifications can be used create representations that are
   "live" for user agents.  This has the potential to immensely simplify
   the task of programming multi-author distributed real-time
   applications.

2.  Design

   Events Query is predicated on a resource being the most intuitive
   source for notifying its events.  Events Query treats notifications
   as a response to a query for an event occurring on the resource.
   With HTTP allowing representations to provide a potentially unbounded
   stream of data, the Events Query Protocol is also able to communicate
   multiple events on the resource as a stream of notifications.

   Unlike other notification protocols, Events Query does not (usually)
   require additional resources to be specifically dedicated as
   endpoints for delivering notifications.  By giving a resource the
   ability to send notifications when an event occurs, Events Query aims
   to reduce the complexity of both servers and clients implementing
   notifications, making it easier to develop real-time applications.

2.1.  Goals

   The goals of the Events Query are:

   1.  to provide notifications only using the HTTP protocol [HTTP]
       [HTTP] so that the clients fetching resources using HTTP are not
       required to switch to another protocol for receiving event
       notifications.

   2.  to provide updates directly from a resource of interest,
       obviating the need to create another endpoint for event
       notifications, minimizing round-trips between clients and servers
       and eliminating the need to co-ordinate responses between a
       resource and the notification endpoint.

   3.  to allow clients to fetch representation and notifications in
       response to a single request, minimizing round-trips between
       clients and servers and eliminating the need to co-ordinate
       timing that might have arisen from multiple requests.

   4.  to allow event notifications to be communicated in any arbitrary
       format.  Implementers shall be able to provide notifications that
       are potentially more expressive when compared to existing HTTP
       based messaging protocols such as Server Sent Events [SSE].

   5.  to specify transparent semantics that allow intermediaries to aid
       in scaling, reliability, and reducing latency of event
       notifications as well as proactively update caches.

2.2.  Constraints

   To the extent feasible, the Events Query:

   1.  adheres to established practices and conventions.  In particular,
       every attempt has been made to reuse existing protocols and
       specifications.  Implementers shall be able to repurpose existing
       tools and libraries for implementing this specification.

   2.  conforms to the REST Architectural Style [REST] and best
       practices for Building Protocols with HTTP [RFC9205].  This
       specification can, thus, be used to extend the capabilities of
       any existing HTTP resource to provide notifications.
       Implementers shall be able to scale notifications along with
       their data/applications.

2.3.  Scope

   The Events Query Protocol specifies:

   1.  A mechanism to discover notification capabilities on a resource.

   2.  A mechanism to request event notifications from a resource.

   3.  A data-model for the notifications query.

   4.  Semantics for the response that serves single event notification.

   5.  Semantics for the streaming response that serve multiple
       notifications as well as the representation.

   The Events Query Protocol does not specify:

   *  Specific representations for request or response.  For the
      purposes of illustration, we shall use:

   *  An imaginary example/event-request media-type for the request.

   *  An imaginary example/event-response media-type for the response
      with a single event notification.

   *  application/http media-type ([HTTP/1.1], Section 10.2) as the
      composite media-type for the response that includes a
      representation and/or multiple event notifications.

2.4.  Limitations

   Events Query only allows notifications to be sent for events on a
   given resource.  To send notifications for events on multiple
   resources, implementations will need to mint separate resources as
   notification endpoints.  This is no different from APIs built on top
   of existing messaging protocols (See, for example, [WS] and
   [WEBSUB]).

   Browsers cap the number of persistent HTTP/1.1 connections per host,
   limiting the suitability of Events Query for web applications in the
   browser that require simultaneous notifications from multiple
   resources on the same host.  This limitation is identical to that of
   other HTTP streaming based protocols, such as Server-Sent Events
   [SSE].  Implementations are strongly encouraged to adopt HTTP/2 (or
   later).  HTTP/1.1 servers might consider setting up a reverse proxy
   over HTTP/2 (or later) or implement mitigation strategies, such as to
   maximize the number of concurrent connections and to provide
   alternate hosts for resources.  Implementations might alternatively
   consider using endpoints to provide notifications for multiple
   resources as previously described.  Clients on a browser requesting
   notifications over an HTTP/1.1 connection are advised to exercise
   caution when opening multiple simultaneous persistent connections to
   any given host.

3.  Conformance

3.1.  Document Conventions

   All assertions, diagrams, examples and notes in this specification
   are non-normative.

3.2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

4.  Terminology and Core Concepts

4.1.  Event

   An event is the instantaneous effect of the (normal or abnormal)
   termination of invocation of an operation on an object of interest
   [DESIGN-FRAMEWORK].  The entity invoking an operation is termed the
   invoker.

   In the specific context of HTTP, the object of interest is data
   scoped to some resource.  When the operation is an HTTP method, the
   invoker is a user agent.  However, an operation need not be limited
   an HTTP method, it might just as easily have been invoked using
   another mechanism or protocol.  Events are then an extension of
   resource state (See [HTTP], Section 3.2) in the temporal dimension.

4.2.  Observation

   An event is considered observable, if an entity outside the invoker
   and object of interest can detect its occurrence.  This entity is the
   observer.  It follows from the HTTP uniform interface that the
   observer is always a server.  The events that are observed, the
   mechanism of observation, and information recorded from the event are
   implementation details for the server.

   That an origin server has to assume the role of an observer in order
   to generate event notifications is obvious.  An intermediary while
   not observing the data scoped to a resource directly, still has the
   possibility to serve as an observer.  An intermediary can observe
   events transmitted by an origin server or another intermediary,
   whether using Events Query or another mechanism, to generate event
   notifications for outbound consumers.

4.3.  Event Notification

   An event notification, or notification, is information transmitted by
   an observer that is intended to reflect an event or contiguous events
   on a resource.  Events Query extends "information hiding" behind the
   HTTP uniform interface to the temporal dimension by defining
   communication with respect to a transferable notification of the
   resource event(s), rather than transferring the event(s) themselves.

   A target resource might be capable of generating multiple
   notifications to transmit events that a subscriber can select from
   using content negotiation.  Hypertext notifications not only can
   provide information of the resource events but also processing
   instructions that help guide the recipient's future actions, for
   example, the possibility to determine of the current representation
   from a previous representation and notifications.

   A response to a subscription request might be used to transmit a
   single notification (Section 7).  Alternatively, the response might
   be a potentially unbounded stream that transmits a sequence of
   notifications (Section 8).  Further, a response can also be used
   transmit representation of the resource state (Section 9) along with
   event notifications.

4.4.  Subscription

   A subscription is an expression of interest to receive event
   notifications sent to an observer.  Due to the request/response
   semantics of HTTP, the user agent that wants to receive event
   notifications is also the subscriber.

   The subscription query affords the user agent the opportunity to
   engage in content negotiation for preferred form of event
   notifications (as well as the representation, if simultaneously
   requested).

5.  Preliminaries

5.1.  Events Header Field

   The Events header field MAY be used by a client in request to
   communicate preferences for the Events Query response.  The Events
   header field is not meant for content negotiation.

   The Events header field MUST be used by a server to communicate the
   properties of a response carrying event notifications.

   Events is a Dictionary structured header field ([HTTP-SF],
   Section 3.2).  The order of keys is insignificant.  Senders SHOULD
   NOT generate keys not registered with the HTTP Event Field Registry.
   Recipients MAY ignore keys that they are unaware of.

5.1.1.  The duration property

   The duration property MAY be used by a client in a request to specify
   the duration for which they prefer the response stream to remain
   open.  A server is completely free to ignore this property.

   The duration property MUST be used by a server in a response to
   indicate the minimum duration for which a server intends to keep the
   response stream open.  This property is merely advisory, and a server
   might still close the response stream before this duration.

   The duration property is a key specified in the Events header field
   of the type Integer ([HTTP-SF], Section 3.3.1).  It is used to
   indicate duration in seconds.  Only positive integer values are
   valid.  A value of 0 indicates an indefinite duration.  If the value
   of the duration property fails to conform to these stipulations, the
   key MUST be ignored.

5.2.  Incremental Header Field

   A server providing event notifications using the Events Query MUST
   include in the response the Incremental header field
   ([INCREMENTAL-HTTP-MESSAGES], Section 3) with its value set to ?0.

5.3.  Events Query Data Model

   The Events Query Data Model defines the semantics of Events Query
   request for multiple notifications and/or representation.  It allows
   for the negotiation of notifications and representation independent
   of a composite media-type that might be used in a Events Query
   response.

   It has the following OPTIONAL properties:

   *  events used to specify header fields needed to negotiate
      notifications, and

   *  state used to specify header fields needed to negotiate a
      representation.

   Implementations are free to extend the Events Query Data Model with
   additional properties.  Implementations can choose an appropriate
   media-type for their application to realize the Events Query Data
   Model.

   state:
     Accept: text/html
   events:
     Accept: example/event-response

              Figure 2: Events Query Data Model in YAML syntax

6.  Discovery

   A user agent can discover if a server supports Events Query on a
   resource by examining the Accept-Query header field ([HTTP-QUERY],
   Section 3) in a response for an appropriate media-type.

   {::include examples/discovery/request.http}

                        Figure 3: Discovery Request

   {::include examples/discovery/response.http}

                        Figure 4: Discovery Response

7.  Single Notification

   The simplest event query is to ask for the next event on a resource.
   This, in effect, overloads a resource with long-polling capability.

7.1.  Request

   A client can send an empty query to be notified of a single event.  A
   server MUST interpret an empty query with an appropriate media-type
   made using the QUERY method ([HTTP-QUERY], Section 3) as a request
   for a single event notification.

   A client can further negotiate the form of the event notification
   using header fields.

   {::include examples/single-notification/request.http}

                Figure 5: Single Event Notification Request

7.2.  Response

   A server MUST NOT send a notification until after the event has been
   completed.  When providing a single notification, the server MUST
   close the connection immediately after transmitting the event
   notification.

   {::include examples/single-notification/response.http}

                Figure 6: Single Event Notification Response

      |  *Implementation Guidance*
      |  
      |  Implementations are advised against sending event notifications
      |  for long-lived resources over HTTP.  A resource might be
      |  considered long-lived, if a server determines that the resource
      |  is unlikely to change in the duration of the notification
      |  response.  In such instances, resource servers are strongly
      |  advised to respond with the Cache-Control ([HTTP-CACHING],
      |  Section 5) header field and the max-age parameter
      |  ([HTTP-CACHING], Section 5.2.2.1) set in it.

8.  Multiple Notifications

   Instead of long-polling for event notifications, Events Query can
   also be used initiate a stream of multiple event notifications.

8.1.  Request

   To request a stream of event notifications from a resource, a client:
   + MUST use the Events Query Data Model (Section 5.3) in an
   appropriate media-type when issuing a subscription request using the
   QUERY method ([HTTP-QUERY], Section 3). + MUST specify the events
   property (Section 5.3, Paragraph 3) in the body of the subscription
   query. + MAY specify any header field under the events property in
   the body of the subscription query.

   A client can also negotiate the form of the representation that
   encapsulates the event notifications using header fields.  Since the
   response carries an encapsulating representation, header fields can
   no longer be used to negotiate the form of an event notification
   itself like in the case of a Section 7.1.

   {::include examples/multiple-notifications/request.http}

                  Figure 7: Multiple Notifications Request

8.2.  Response

   The response stream encapsulates multiple event notifications
   (typically, but not necessarily) in a composite media-type.  We shall
   be using application/http media-type ([HTTP/1.1], Section 10.2) for
   the purpose of illustration.

   {::include examples/multiple-notifications/response.http}

                 Figure 8: Multiple Notifications Response

8.2.1.  Termination

   Apart from the connection exceeding time period set in the duration
   property of the Events header field, a server MUST end the response
   immediately after the resource has been deleted.

9.  Including Representation

   Events Query allows a user agent to simultaneously request for a
   representation along with event notifications.  This not only saves
   on an extra round trip, but relieves a user agent from the burden of
   ensuring that event notifications are temporally coordinated with the
   representation.

9.1.  Request

   To request that a representation of the resource be sent along with
   events notifications, a client: + MUST use the Events Query Data
   Model (Section 5.3) in an appropriate media-type when issuing a
   subscription request using the QUERY method ([HTTP-QUERY],
   Section 3). + MUST specify the state property (Section 5.3, Paragraph
   4) in the body of the subscription query. + MAY specify any header
   field under the state property in the body of the subscription query.

   Otherwise, the request is identical to a Multiple Notifications
   Request (Section 8.1):

   {::include examples/representation/request.http}

             Figure 9: Representation and Notifications Request

9.2.  Response

   Much like in the case of Multiple Notifications Response
   (Section 8.2), the response stream encapsulates the representation
   (typically) in a composite media-type.  Again, we shall use the
   application/http media-type ([HTTP/1.1], Section 10.2) for the
   purpose of illustration.

   {::include examples/representation/response.http}

            Figure 10: Representation and Notifications Response

10.  Security Considerations

   Events Query is subject to the security considerations of the HTTP
   QUERY method ([HTTP-QUERY], Section 2) and more generally HTTP
   Semantics.  Considerations relevant to the use of HTTP QUERY method
   are discussed in Section 4 of [HTTP-QUERY] and HTTP Semantics and its
   use for transferring information over the Internet are discussed in
   Section 17 of [HTTP].

   When serving a stream of notifications, resources are required to
   keep the response stream open for an extended period of time, making
   them more susceptible to Denial-of-Service attacks because the effort
   required to request notifications from the same resource is tiny
   compared to the time, memory, and bandwidth consumed by attempting to
   serve the notifications.  Servers ought to ignore, coalesce, or
   reject egregious notification request, such as repeated notification
   requests to a resource from the same origin.

11.  IANA Considerations

   The change controller for the following registrations is: "IETF
   (iesg@ietf.org) - Internet Engineering Task Force".

11.1.  HTTP Field Registration

   IANA is requested to add the following entry in the "Hypertext
   Transfer Protocol (HTTP) Field Name Registry
   (https://www.iana.org/assignments/http-fields/)" defined by [HTTP]:

    +====================+===========+=================+=============+
    | Header Field Names | Status    | Structured-Type | Reference   |
    +====================+===========+=================+=============+
    | Events             | Permanent | Dictionary      | Section 5.1 |
    +--------------------+-----------+-----------------+-------------+

                                 Table 1

11.2.  The HTTP Events Field Registry

   IANA is requested to create a new registry, "HTTP Events Field
   Registry", under the Hypertext Transfer Protocol (HTTP) Parameters
   (https://www.iana.org/assignments/http-parameters/) registry to
   register properties for use in the Events header field.  New
   registrations will use the Specification Required policy ([RFC8126],
   Section 4.6).

11.2.1.  Template

   The registration template for the "HTTP Events Field Registry" is:

   *  Property Name: A Dictionary ([HTTP-SF], Section 3.2) key to be
      used in the Events header field.

   *  Structured Type: The Structured Data Type of the value associated
      with the key, according to requirements in Section 3.2 of
      [HTTP-SF].

   *  Optional Parameters: An enumeration of optional parameters, and
      their values, associated with the entry.

   *  Description:

   *  Reference:

   *  Notes: (optional)

11.2.2.  Initial Registry Contents

   The initial contents of the HTTP Events Field Registry are:

    +===============+=================+===================+===========+
    | Property Name | Structured-Type | Description       | Reference |
    +===============+=================+===================+===========+
    | duration      | Integer Item    | See Section 5.1.1 | Section   |
    |               |                 |                   | 5.1.1     |
    +---------------+-----------------+-------------------+-----------+

                                  Table 2

12.  References

12.1.  Normative References

   [HTTP]     Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

   [HTTP-QUERY]
              Reschke, J., Snell, J. M., and M. Bishop, "The HTTP QUERY
              Method", Work in Progress, Internet-Draft, draft-ietf-
              httpbis-safe-method-w-body-10, 29 April 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
              safe-method-w-body-10>.

   [HTTP-SF]  Nottingham, M. and P. Kamp, "Structured Field Values for
              HTTP", RFC 9651, DOI 10.17487/RFC9651, September 2024,
              <https://www.rfc-editor.org/rfc/rfc9651>.

   [INCREMENTAL-HTTP-MESSAGES]
              Oku, K., Pauly, T., and M. Thomson, "Incremental HTTP
              Messages", Work in Progress, Internet-Draft, draft-ietf-
              httpbis-incremental-00, 29 April 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-
              incremental-00>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/rfc/rfc8126>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

12.2.  Informative References

   [DESIGN-FRAMEWORK]
              Rosenblum, D. and A. Wolf, "A design framework for
              Internet-scale event observation and notification",
              Association for Computing Machinery (ACM), ACM SIGSOFT
              Software Engineering Notes vol. 22, no. 6, pp. 344-360,
              DOI 10.1145/267896.267920, November 1997,
              <https://doi.org/10.1145/267896.267920>.

   [HTTP-CACHING]
              Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Caching", STD 98, RFC 9111,
              DOI 10.17487/RFC9111, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9111>.

   [HTTP/1.1] Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP/1.1", STD 99, RFC 9112, DOI 10.17487/RFC9112,
              June 2022, <https://www.rfc-editor.org/rfc/rfc9112>.

   [REST]     Fielding, R., "Architectural Styles and the Design of
              Network-based Software Architectures", Doctoral
              Dissertation, University of California, Irvine,
              <https://roy.gbiv.com/pubs/dissertation/top.htm>.

   [RFC7838]  Nottingham, M., McManus, P., and J. Reschke, "HTTP
              Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
              April 2016, <https://www.rfc-editor.org/rfc/rfc7838>.

   [RFC9205]  Nottingham, M., "Building Protocols with HTTP", BCP 56,
              RFC 9205, DOI 10.17487/RFC9205, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9205>.

   [SSE]      "Server-Sent Events", W3C REC eventsource,
              W3C eventsource, <https://www.w3.org/TR/eventsource/>.

   [WEBSUB]   "WebSub", W3C REC websub, W3C websub,
              <https://www.w3.org/TR/websub/>.

   [WS]       "The WebSocket API", W3C NOTE websockets, W3C websockets,
              <https://www.w3.org/TR/websockets/>.

Acknowledgments

   TODO acknowledge.

Index

   D E I N O S

      D

         duration (property)  *_Section 5.1.1_*; Section 8.2.1,
            Paragraph 1; Table 2

      E

         event  *_Section 4.1_*; Section 4.2, Paragraph 1; Section 4.2,
            Paragraph 2; Section 4.3, Paragraph 1; Section 4.3,
            Paragraph 2
         event notification  Section Abstract, Paragraph 1; Section 1,
            Paragraph 2; Section 1, Paragraph 3; Section 1, Paragraph 4;
            Section 1, Paragraph 7; Section 1, Paragraph 8; Section 2.1,
            Paragraph 2.1.1; Section 2.1, Paragraph 2.2.1; Section 2.1,
            Paragraph 2.4.1; Section 2.1, Paragraph 2.5.1; Section 2.3,
            Paragraph 2.2.1; Section 2.3, Paragraph 2.4.1; Section 2.3,
            Paragraph 4.3.1; Section 2.3, Paragraph 4.4.1; Section 4.2,
            Paragraph 2; *_Section 4.3_*; Section 4.3, Paragraph 1;
            Section 4.3, Paragraph 2; Section 4.3, Paragraph 3;
            Section 4.4, Paragraph 1; Section 4.4, Paragraph 2;
            Section 5.1, Paragraph 2; Section 5.2, Paragraph 1;
            Section 7.1, Paragraph 1; Section 7.1, Paragraph 2;
            Section 7.2, Paragraph 1; Section 7.2, Paragraph 3.2;
            Section 8, Paragraph 1; Section 8.1, Paragraph 1;
            Section 8.1, Paragraph 2; Section 8.2, Paragraph 1;
            Section 9, Paragraph 1
         events (header field)  *_Section 5.1_*; Section 8.2.1,
            Paragraph 1; Table 1; Section 11.2, Paragraph 1;
            Section 11.2.1, Paragraph 2.1.1
         events (property)  Section 8.1, Paragraph 1
         Events Query Data Model  *_Section 5.3_*; Section 8.1,
            Paragraph 1; Section 9.1, Paragraph 1

      I

         invoker  *_Section 4.1, Paragraph 1_*; Section 4.1, Paragraph
            2; Section 4.2, Paragraph 1

      N

         notification  Section Abstract, Paragraph 1; Section 1,
            Paragraph 2; Section 1, Paragraph 3; Section 1, Paragraph 4;
            Section 1, Paragraph 7; Section 1, Paragraph 8; Section 2.1,
            Paragraph 2.1.1; Section 2.1, Paragraph 2.2.1; Section 2.1,
            Paragraph 2.4.1; Section 2.1, Paragraph 2.5.1; Section 2.3,
            Paragraph 2.2.1; Section 2.3, Paragraph 2.4.1; Section 2.3,
            Paragraph 4.3.1; Section 2.3, Paragraph 4.4.1; Section 4.2,
            Paragraph 2; *_Section 4.3_*; Section 4.3, Paragraph 1;
            Section 4.3, Paragraph 3; Section 4.4, Paragraph 1;
            Section 4.4, Paragraph 2; Section 5.1, Paragraph 2;
            Section 5.2, Paragraph 1; Section 7.1, Paragraph 1;
            Section 7.1, Paragraph 2; Section 7.2, Paragraph 1;
            Section 7.2, Paragraph 3.2; Section 8, Paragraph 1;
            Section 8.1, Paragraph 1; Section 8.1, Paragraph 2;
            Section 8.2, Paragraph 1; Section 9, Paragraph 1

      O

         observation  *_Section 4.2_*
         observer  *_Section 4.2, Paragraph 1_*; Section 4.2, Paragraph
            2; Section 4.3, Paragraph 1; Section 4.4, Paragraph 1

      S

         state (property)  Section 9.1, Paragraph 1
         subscriber  Section 4.3, Paragraph 2; *_Section 4.4, Paragraph
            1_*
         subscription  Section 4.3, Paragraph 3; *_Section 4.4_*;
            Section 8.1, Paragraph 1; Section 9.1, Paragraph 1

Author's Address

   Rahul Gupta
   Email: CxRes@users.noreply.github.com
